/* TJShow (C) Tommy van der Vorst, Pixelspark, 2005-2017.
 * 
 * This file is part of TJShow. TJShow is free software: you 
 * can redistribute it and/or modify it under the terms of the GNU
 * General Public License as published by the Free Software Foundation,
 * either version 3 of the License, or (at your option) any later 
 * version.
 * 
 * TJShow is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with TJShow.  If not, see <http://www.gnu.org/licenses/>. */
#include "../include/tjmidi.h"

const wchar_t* MIDI::Notes[128] = {
	L"C-2",		// 0
	L"C#-2",
	L"D-2",
	L"D#-2",
	L"E-2",
	L"F-2",
	L"F#-2",
	L"G-2",
	L"G#-2",
	L"A-2",
	L"A#-2",
	L"B-2",

	L"C-1",		// 12
	L"C#-1",
	L"D-1",
	L"D#-1",
	L"E-1",
	L"F-1",
	L"F#-1",
	L"G-1",
	L"G#-1",
	L"A-1",
	L"A#-1",
	L"B-1",

	L"C0",		// 24
	L"C#0",
	L"D0",
	L"D#0",
	L"E0",
	L"F0",
	L"F#0",
	L"G0",
	L"G#0",
	L"A0",
	L"A#0",
	L"B0",

	L"C1",		// 36
	L"C#1",
	L"D1",
	L"D#1",
	L"E1",
	L"F1",
	L"F#1",
	L"G1",
	L"G#1",
	L"A1",
	L"A#1",
	L"B1",		

	L"C2",		// 48
	L"C#2",
	L"D2",
	L"D#2",
	L"E2",
	L"F2",
	L"F#2",
	L"G2",
	L"G#2",
	L"A2",
	L"A#2",
	L"B2",

	L"C3",		// 60
	L"C#3",
	L"D3",
	L"D#3",
	L"E3",
	L"F3",
	L"F#3",
	L"G3",
	L"G#3",
	L"A3",
	L"A#3",
	L"B3",

	L"C4",		// 72
	L"C#4",
	L"D4",
	L"D#4",
	L"E4",
	L"F4",
	L"F#4",
	L"G4",
	L"G#4",
	L"A4",
	L"A#4",
	L"B4",

	L"C5",		// 84
	L"C#5",
	L"D5",
	L"D#5",
	L"E5",
	L"F5",
	L"F#5",
	L"G5",
	L"G#5",
	L"A5",
	L"A#5",
	L"B5",

	L"C6",		// 96
	L"C#6",
	L"D6",
	L"D#6",
	L"E6",
	L"F6",
	L"F#6",
	L"G6",
	L"G#6",
	L"A6",
	L"A#6",
	L"B6",

	L"C7",		// 108
	L"C#7",
	L"D7",
	L"D#7",
	L"E7",
	L"F7",
	L"F#7",
	L"G7",
	L"G#7",
	L"A7",
	L"A#7",
	L"B7",

	L"C8",		// 120
	L"C#8",
	L"D8",
	L"D#8",
	L"E8",
	L"F8",
	L"F#8",
	L"G8",		// 127
};

// From http://www.tweakheadz.com/midi_controllers.htm
const wchar_t* MIDI::Controls[128] = {
	L"Bank select",							// 0
	L"Modulation wheel",
	L"Breath controller",
	L"<Undefined 3>",
	L"Foot pedal MSB",
	L"Portamento time MSB",
	L"Data entry MSB",
	L"Volume MSB",
	L"Balance MSB",
	L"Pan MSB",
	L"<Undefined 10>",
	L"Expression MSB",
	L"Effect control 1 MSB",
	L"Effect control 2 MSB",
	L"<Undefined 14>",
	L"<Undefined 15>",

	L"Ribbon Controller / General Purpose 1", // 16
	L"Knob 1 / General Purpose 2",
	L"General Purpose 3",
	L"Knob 2 / General Purpose 4",
	L"Knob 3",
	L"Knob 4",
	L"<Device specific 22>",
	L"<Device specific 23>",
	L"<Device specific 24>",
	L"<Device specific 25>",
	L"<Device specific 26>",
	L"<Device specific 27>",
	L"<Device specific 28>",
	L"<Device specific 29>",
	L"<Device specific 30>",
	L"<Device specific 31>",				
	L"Bank select LSB",						// 32
	L"Modulation wheel LSB",
	L"Breath controller LSB",
	L"<Undefined 35>",
	L"Foot pedal LSB",
	L"Portamento time LSB",
	L"Data entry LSB",
	L"Volume LSB",
	L"Balance LSB",
	L"<Undefined 41>",
	L"Pan LSB",
	L"Expression LSB",
	L"Effect control 1 LSB",
	L"Effect control 2 LSB",
	L"<Device specific 46>",
	L"<Device specific 47>",
	L"<Device specific 48>",				// 48
	L"<Device specific 49>",
	L"<Device specific 50>",					
	L"<Device specific 51>",
	L"<Device specific 52>",
	L"<Device specific 53>",
	L"<Device specific 54>",
	L"<Device specific 55>",
	L"<Device specific 56>",
	L"<Device specific 57>",
	L"<Device specific 58>",
	L"<Device specific 59>",
	L"<Device specific 60>",
	L"<Device specific 61>",
	L"<Device specific 62>",
	L"<Device specific 63>",
	L"Hold pedal on/off",					// 64
	L"Portamento on/off",
	L"Sustenuto on/off",
	L"Soft pedal on/off",
	L"Legato pedal on/off",
	L"Hold 2 pedal on/off",
	L"Sound variation",
	L"Resonance (timbre)",
	L"Sound release time",					
	L"Sound attack time",
	L"Frequency cutoff (brightness)",
	L"Sound control 6",
	L"Sound control 7",
	L"Sound control 8",
	L"Sound control 9",
	L"Sound control 10",
	L"Decay / General purpose button 1",	// 80
	L"Hi-pass / General purpose button 2",
	L"General purpose button 3",
	L"General purpose button 4",
	L"<Device specific 84>",
	L"<Device specific 85>",
	L"<Device specific 86>",
	L"<Device specific 87>",
	L"<Device specific 88>",
	L"<Device specific 89>",
	L"<Device specific 90>",
	L"Reverb",
	L"Tremolo",
	L"Chorus",
	L"Celeste / Detune",
	L"Phaser", 
	L"Data increment",						// 96
	L"Data decrement",
	L"Non-registered parameter LSB",
	L"Non-registered parameter MSB",
	L"Registered parameter LSB",
	L"Registered parameter MSB",
	L"<Undefined 102>",
	L"<Undefined 103>",
	L"<Undefined 104>",
	L"<Undefined 105>",
	L"<Undefined 106>",
	L"<Undefined 107>",
	L"<Undefined 108>",
	L"<Undefined 109>",
	L"<Undefined 110>",
	L"<Undefined 111>",
	L"<Undefined 112>",						// 112
	L"<Undefined 113>",
	L"<Undefined 114>",
	L"<Undefined 115>",
	L"<Undefined 116>",
	L"<Undefined 117>",
	L"<Undefined 118>",
	L"<Undefined 119>",
	L"All sounds off",
	L"All controllers off",
	L"Local keyboard on/off",
	L"All notes off",
	L"Omni mode off",
	L"Omni mode on",
	L"Mono operation",
	L"Poly operation",
};

const wchar_t* MIDI::Programs[128] = {
	L"Acoustic Grand",
	L"Bright Acoustic",
	L"Electric Grand",
	L"Honky-Tonk",
	L"Electric Piano 1",
	L"Electric Piano 2",
	L"Harpsichord",
	L"Clavinet",
	L"Celesta",
	L"Glockenspiel",
	L"Music Box",
	L"Vibraphone",
	L"Marimba",
	L"Xylophone",
	L"Tubular Bells",
	L"Dulcimer",
	L"Drawbar Organ",
	L"Percussive Organ",
	L"Rock Organ",
	L"Church Organ",
	L"Reed Organ",
	L"Accoridan",
	L"Harmonica",
	L"Tango Accordian",
	L"Nylon String Guitar",
	L"Steel String Guitar",
	L"Electric Jazz Guitar",
	L"Electric Clean Guitar",
	L"Electric Muted Guitar",
	L"Overdriven Guitar",
	L"Distortion Guitar",
	L"Guitar Harmonics",
	L"Acoustic Bass",
	L"Electric Bass(finger)",
	L"Electric Bass(pick)",
	L"Fretless Bass",
	L"Slap Bass 1",
	L"Slap Bass 2",
	L"Synth Bass 1",
	L"Synth Bass 2",
	L"Violin",
	L"Viola",
	L"Cello",
	L"Contrabass",
	L"Tremolo Strings",
	L"Pizzicato Strings",
	L"Orchestral Strings",
	L"Timpani",
	L"String Ensemble 1",
	L"String Ensemble 2",
	L"SynthStrings 1",
	L"SynthStrings 2",
	L"Choir Aahs",
	L"Voice Oohs",
	L"Synth Voice",
	L"Orchestra Hit",
	L"Trumpet",
	L"Trombone",
	L"Tuba",
	L"Muted Trumpet",
	L"French Horn",
	L"Brass Section",
	L"SynthBrass 1",
	L"SynthBrass 2",
	L"Soprano Sax",
	L"Alto Sax",
	L"Tenor Sax",
	L"Baritone Sax",
	L"Oboe",
	L"English Horn",
	L"Bassoon",
	L"Clarinet",
	L"Piccolo",
	L"Flute",
	L"Recorder",
	L"Pan Flute",
	L"Blown Bottle",
	L"Skakuhachi",
	L"Whistle",
	L"Ocarina",
	L"Lead 1 (square)",
	L"Lead 2 (sawtooth)",
	L"Lead 3 (calliope)",
	L"Lead 4 (chiff)",
	L"Lead 5 (charang)",
	L"Lead 6 (voice)",
	L"Lead 7 (fifths)",
	L"Lead 8 (bass+lead)",
	L"Pad 1 (new age)",
	L"Pad 2 (warm)",
	L"Pad 3 (polysynth)",
	L"Pad 4 (choir)",
	L"Pad 5 (bowed)",
	L"Pad 6 (metallic)",
	L"Pad 7 (halo)",
	L"Pad 8 (sweep)",
	L"FX 1 (rain)",
	L"FX 2 (soundtrack)",
	L"FX 3 (crystal)",
	L"FX 4 (atmosphere)",
	L"FX 5 (brightness)",
	L"FX 6 (goblins)",
	L"FX 7 (echoes)",
	L"FX 8 (sci-fi)",
	L"Sitar",
	L"Banjo",
	L"Shamisen",
	L"Koto",
	L"Kalimba",
	L"Bagpipe",
	L"Fiddle",
	L"Shanai",
	L"Tinkle Bell",
	L"Agogo",
	L"Steel Drums",
	L"Woodblock",
	L"Taiko Drum",
	L"Melodic Tom",
	L"Synth Drum",
	L"Reverse Cymbal",
	L"Guitar Fret Noise",
	L"Breath Noise",
	L"Seashore",
	L"Bird Tweet",
	L"Telephone Ring",
	L"Helicopter",
	L"Applause",
	L"Gunshot",
};

const wchar_t* MSC::Commands[MSC::_LastCommand+1] = {
	L"[No command]",
	L"Go",
	L"Stop",
	L"Resume", 
	L"Timed Go", 
	L"Load",
	L"Set", 
	L"Fire", 
	L"All Off",
	L"Restore",
	L"Reset", 
	L"Go Off",
	L"", 
	L"",
	L"",
	L"",

	// 0x10
	L"Go (Jam Clock)",
	L"Standby +",
	L"Standby -",
	L"Sequence +",
	L"Sequence -",
	L"Start clock",
	L"Stop clock",
	L"Zero clock",
	L"MTC Chase on",
	L"MTC Chase off",
	L"Open cue list",
	L"Close cue list",
	L"Open cue path",
	L"Close cue path", 
	L"",
	L"",

	// 0x20
	L"20",
	L"21",
	L"22",
	L"23",
	L"24",
	L"25",
	L"26",
	L"27",
	L"28",
	L"29",
	L"2A",
	L"2B",
	L"2C",
	L"2D",
	L"2E",
	L"2F",

	// 0x30
	L"30",
	L"31",
	L"32",
	L"33",
	L"34",
	L"35",
	L"36",
	L"37",
	L"38",
	L"39",
	L"3A",
	L"3B",
	L"3C",
	L"3D",
	L"3E",
	L"3F",

	// 0x40
	L"40",
	L"41",
	L"42",
	L"43",
	L"44",
	L"45",
	L"46",
	L"47",
	L"48",
	L"49",
	L"4A",
	L"4B",
	L"4C",
	L"4D",
	L"4E",
	L"4F",

	// 0x50
	L"50",
	L"51",
	L"52",
	L"53",
	L"54",
	L"55",
	L"56",
	L"57",
	L"58",
	L"59",
	L"5A",
	L"5B",
	L"5C",
	L"5D",
	L"5E",
	L"5F",

	// 0x60
	L"60",
	L"61",
	L"62",
	L"63",
	L"64",
	L"65",
	L"66",
	L"67",
	L"68",
	L"69",
	L"6A",
	L"6B",
	L"6C",
	L"6D",
	L"6E",
	L"6F",

	// 0x70
	L"70",
	L"71",
	L"72",
	L"73",
	L"74",
	L"75",
	L"76",
	L"77",
	L"78",
	L"79",
	L"7A",
	L"7B",
	L"7C",
	L"7D",
	L"7E",
	L"7F",
};

const wchar_t* MSC::CommandFormats[MSC::_LastCommandFormat+1] = {
	L"",
	L"[Lighting]",
	L"Moving lights",
	L"Colour changers",
	L"Strobes",
	L"Lasers",
	L"Chasers",
	L"[Unknown lighting 0x07]",
	L"[Unknown lighting 0x08]",
	L"[Unknown lighting 0x09]",
	L"[Unknown lighting 0x0A]",
	L"[Unknown lighting 0x0B]",
	L"[Unknown lighting 0x0C]",
	L"[Unknown lighting 0x0D]",
	L"[Unknown lighting 0x0E]",
	L"[Unknown lighting 0x0F]",

	// 0x10
	L"[Sound]",
	L"Music",
	L"CD players",
	L"EPROM playback",
	L"Audio tape machines",
	L"Intercoms"
	L"Amplifiers",
	L"AudioEffectDevices",
	L"Equalizers",
	L"[Unknown sound 0x19]",
	L"[Unknown sound 0x0A]",
	L"[Unknown sound 0x0B]",
	L"[Unknown sound 0x0C]",
	L"[Unknown sound 0x0D]",
	L"[Unknown sound 0x0E]",
	L"[Unknown sound 0x0F]",
			
	// 0x20
	L"[Machinery]",
	L"Rigging",
	L"Flys",
	L"Lifts",
	L"Turntables",
	L"Trusses",
	L"Robots",
	L"Animation",
	L"Floats",
	L"Breakaways",
	L"Barges",
	L"[Unknown machinery 0x2B]",
	L"[Unknown machinery 0x2C]",
	L"[Unknown machinery 0x2D]",
	L"[Unknown machinery 0x2E]",
	L"[Unknown machinery 0x2F]",

	// 0x30
	L"[Video]",
	L"Video tape machines",
	L"Video cassette machines",
	L"Video disc players",
	L"Video switches",
	L"Video effects",
	L"Video character generators",
	L"Video still stores",
	L"Video monitors",
	L"[Unknown video 0x39]",
	L"[Unknown video 0x3A]",
	L"[Unknown video 0x3B]",
	L"[Unknown video 0x3C]",
	L"[Unknown video 0x3D]",
	L"[Unknown video 0x3E]",
	L"[Unknown video 0x3F]",

	// 0x40
	L"[Projection]",
	L"Film projectors",
	L"Slide projectors",
	L"Video projectors",
	L"Dissolvers",
	L"Shutter controls",
	L"[Unknown projection 0x46]",
	L"[Unknown projection 0x47]",
	L"[Unknown projection 0x48]",
	L"[Unknown projection 0x49]",
	L"[Unknown projection 0x4A]",
	L"[Unknown projection 0x4B]",
	L"[Unknown projection 0x4C]",
	L"[Unknown projection 0x4D]",
	L"[Unknown projection 0x4E]",
	L"[Unknown projection 0x4F]",

	// 0x50
	L"[Process control]",
	L"Hydraulic oil",
	L"H2O",
	L"CO2",
	L"Compressed air",
	L"Natural gas",
	L"Fog",
	L"Smoke",
	L"Cracked haze",
	L"[Unknown process control 0x59]",
	L"[Unknown process control 0x5A]",
	L"[Unknown process control 0x5B]",
	L"[Unknown process control 0x5C]",
	L"[Unknown process control 0x5D]",
	L"[Unknown process control 0x5E]",
	L"[Unknown process control 0x5F]",

	// 0x60
	L"[Pyro]",
	L"Fireworks",
	L"Explosions",
	L"Flame",
	L"Smoke pots",
	L"[Unknown pyro 0x65]",
	L"[Unknown pyro 0x66]",
	L"[Unknown pyro 0x67]",
	L"[Unknown pyro 0x68]",
	L"[Unknown pyro 0x69]",
	L"[Unknown pyro 0x6A]",
	L"[Unknown pyro 0x6B]",
	L"[Unknown pyro 0x6C]",
	L"[Unknown pyro 0x6D]",
	L"[Unknown pyro 0x6E]",
	L"[Unknown pyro 0x6F]",

	// 0x70
	L"[Unknown 0x70]",
	L"[Unknown 0x71]",
	L"[Unknown 0x72]",
	L"[Unknown 0x73]",
	L"[Unknown 0x74]",
	L"[Unknown 0x75]",
	L"[Unknown 0x76]",
	L"[Unknown 0x77]",
	L"[Unknown 0x78]",
	L"[Unknown 0x79]",
	L"[Unknown 0x7A]",
	L"[Unknown 0x7B]",
	L"[Unknown 0x7C]",
	L"[Unknown 0x7D]",
	L"[Unknown 0x7E]",
	L"[All types]",
	L"",
};

MSC::CueID::CueID(const std::wstring& nr, const std::wstring& list, const std::wstring& path): _cueNumber(nr), _cueList(list), _cuePath(path) {
}

void MSC::CueID::SerializeNumber(strong<DataWriter> cw, const std::wstring& num) {
	std::string asciiNum = Mbs(num);

	std::string::const_iterator it = asciiNum.begin();
	while(it!=asciiNum.end()) {
		char ch = *it;
		if(ch == '.' || (ch >= '0' && ch <='9')) {
			cw->Add(ch);
		}
		++it;
	}
}

void MSC::CueID::Serialize(strong<DataWriter> code) {
	SerializeNumber(code, _cueNumber);
	code->Add((unsigned char)0x00);
	SerializeNumber(code, _cueList);
	code->Add((unsigned char)0x00);
	SerializeNumber(code, _cuePath);
}

void MSC::CueID::Save(TiXmlElement* you) {
	SaveAttributeSmall<std::wstring>(you, "number", _cueNumber);
	SaveAttributeSmall<std::wstring>(you, "list", _cueList);
	SaveAttributeSmall<std::wstring>(you, "path", _cuePath);
}

void MSC::CueID::Load(TiXmlElement* you) {
	_cueNumber = LoadAttributeSmall<std::wstring>(you, "number", _cueNumber);
	_cueList = LoadAttributeSmall<std::wstring>(you, "list", _cueList);
	_cuePath = LoadAttributeSmall<std::wstring>(you, "path", _cuePath);
}

void MSC::CueID::AddProperties(ref<PropertySet> existing, ref<Inspectable> holder) {
	existing->Add(GC::Hold(new PropertySeparator(TL(midi_msc_cue), _cueNumber.length()==0)));
	existing->Add(GC::Hold(new GenericProperty<std::wstring>(TL(midi_msc_cue_number), holder, &_cueNumber, _cueNumber)));
	existing->Add(GC::Hold(new GenericProperty<std::wstring>(TL(midi_msc_cue_list), holder, &_cueList, TL(midi_msc_use_track_default))));
	existing->Add(GC::Hold(new GenericProperty<std::wstring>(TL(midi_msc_cue_path), holder, &_cuePath, TL(midi_msc_use_track_default))));
}

extern "C" { 
	__declspec(dllexport) std::vector<ref<Plugin> >* GetPlugins() {
		std::vector<ref<Plugin> >* plugins = new std::vector<ref<Plugin> >();
		plugins->push_back(GC::Hold(new MIDIPlugin()));
		plugins->push_back(GC::Hold(new MMCPlugin()));
		plugins->push_back(GC::Hold(new MSCPlugin()));
		plugins->push_back(GC::Hold(new VoicePlugin()));
		plugins->push_back(GC::Hold(new ControlChangePlugin()));
		return plugins;
	}
}